import React, { useState } from "react";
import { FaHeart } from "react-icons/fa";
import FavoriteEventShow from "./FavoriteEventShow";
import { useDispatch } from "react-redux";
import { removeEventUser } from "../../store";
import ConfirmModal from "../modals/ConfirmModal";
import { IoIosClose } from "react-icons/io";

function EventCard({ event }) {
  const containerClass =
    "items-center flex flex-col justify-center border-2 mb-4 mt-4 rounded-lg overflow-hidden z-50 h-full p-8 bg-blue-100 border-blue-800 rounded-lg shadow hover:bg-blue-200 dark:bg-blue-800 dark:border-yellow-700 dark:hover:bg-blue-700 relative";
  const favoriteClass =
    "absolute bottom-9 right-4 text-4xl text-red-500 cursor-pointer";
  const imageClass =
    "w-full h-96 object-cover place-item-center cursor-pointer transition-transform transform hover:scale-105";
  const titleClass =
    "cursor-pointer font-bold text-center mt-1 mb-6 text-3xl text-white line-clamp-1";
  const generatedByClass = "absolute bottom-6 left-6 text-lg mr-3";
  const errorMessageClass =
    "bg-red-500 text-white p-4 place-item-center text-center absolute mx-auto z-50";
  const closeButtonClass =
    "text-2xl absolute top-2 right-2 cursor-pointer bg-red-900 p-1 rounded-full";

  const dispatch = useDispatch();

  const [fullState, setFullState] = useState(false);
  const [confirmModal, setConfirmModal] = useState(false);
  const [errorState, setErrorState] = useState(false);

  const handleClickHeart = function () {
    if (new Date(event.date) < new Date()) {
      setErrorState(true);
      return;
    }
    setConfirmModal(!confirmModal);
  };

  const handleClickShow = function () {
    setFullState(!fullState);
  };

  const deleteFavorite = function () {
    dispatch(removeEventUser(event));
    setConfirmModal(false);
  };

  const closeConfirmModal = function () {
    setConfirmModal(false);
  };

  const openModal = function () {
    setFullState(true);
  };

  const closeModal = function () {
    setFullState(false);
  };

  const handleClose = function () {
    setErrorState(false);
  };

  return (
    <div>
      {confirmModal && (
        <ConfirmModal
          open={confirmModal}
          onClose={closeConfirmModal}
          onDelete={deleteFavorite}
          onUndo={closeConfirmModal}
          message={
            "Are you sure you want to delete '" +
            event.name +
            "' from your favorites?"
          }
        />
      )}
      <div className={containerClass}>
        <img
          src={event.image}
          className={imageClass}
          alt={event.name}
          onClick={handleClickShow}
        />
        <FaHeart className={favoriteClass} onClick={handleClickHeart} />
        <div className={titleClass} onClick={handleClickShow}>
          {event.name}
        </div>
        <div className={generatedByClass}>
          Generated by: <br />
          <b>{event.generator}</b>
        </div>

        {fullState && (
          <FavoriteEventShow
            event={event}
            key={event.name}
            onClickHeart={handleClickHeart}
            open={openModal}
            onClose={closeModal}
          />
        )}
        {errorState && (
          <div className={errorMessageClass}>
            <div>You cannot delete a past event!</div>
            <div>
              <IoIosClose className={closeButtonClass} onClick={handleClose} />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default EventCard;
