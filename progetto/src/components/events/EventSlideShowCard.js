import { FaHeart, FaRegHeart } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { addEventUser, removeEventUser } from "../../store";
import EventShow from "./EventShow";
import { useState, useEffect, useContext } from "react";
import LoginModals from "../modals/loginModals";
import NavigationContext from "../../context/navigation";

function EventSlideShowCard({ event }) {
  const dispatch = useDispatch();
  const { navigate } = useContext(NavigationContext);

  const eventContainerClass =
    "max-w-screen-md w-full h-full flex justify-center mx-auto flex-col place-content-center border-2 mb-2 overflow-hidden z-50 p-6 bg-blue-200 border-blue-800 rounded-lg shadow dark:bg-blue-800 dark:border-yellow-700 transition-colors duration-300 ease-in-out hover:bg-blue-300";
  const imageContainerClass =
    "relative cursor-pointer transition-transform transform hover:scale-105 w-full h-[300px]";
  const imageClass =
    "w-full h-full object-cover mx-auto transition-transform transform hover:brightness-75";
  const titleAndHeartClass = "mt-2 text-center";
  const titleClass =
    "font-bold text-2xl text-white cursor-pointer transition-colors duration-300 ease-in-out hover:text-gray-800";
  const generatedByClass = "text-left pl-2";
  const favoriteClass = "text-right pr-2";
  const favoritebuttonClass = "text-4xl cursor-pointer text-red-500";

  const { logged, events } = useSelector((state) => state.users);
  const { index } = useSelector((state) => state.events);

  const [favoriteState, setFavoriteState] = useState(false);
  const [modal, setModal] = useState(false);
  const [fullState, setFullState] = useState(false);

  const handleClickHeart = function (event) {
    if (logged) {
      if (favoriteState) {
        dispatch(removeEventUser(event));
      } else {
        dispatch(addEventUser(event));
      }
      setFavoriteState(!favoriteState);
    } else {
      setModal(true);
    }
  };

  const handleClickEvent = function () {
    setFullState(!fullState);
  };

  useEffect(() => {
    if (logged) {
      if (events.find((item) => item.name === event.name)) {
        setFavoriteState(true);
      } else {
        setFavoriteState(false);
      }
    }
  }, [logged, index, events]);

  const openModal = function () {
    setFullState(true);
  };

  const closeModal = function () {
    setFullState(false);
  };

  const handleClickButton = function () {
    navigate("/login");
  };

  const handleClickClose = function () {
    setModal(false);
  };

  const altText = "Image of " + event.name;

  return (
    <div className={eventContainerClass}>
      <div className={imageContainerClass} onClick={handleClickEvent}>
        <img className={imageClass} src={event.image} alt={altText} />
      </div>
      <div className={titleAndHeartClass}>
        <div className={titleClass} onClick={handleClickEvent}>
          {event.name}
        </div>
        <div className="flex justify-between mt-2 w-full">
          <div className={generatedByClass}>
            Generated by: <br />
            <b>{event.generator}</b>
          </div>
          <div className={favoriteClass}>
            {favoriteState ? (
              <FaHeart
                className={favoritebuttonClass}
                onClick={() => handleClickHeart(event)}
              />
            ) : (
              <FaRegHeart
                className={favoritebuttonClass}
                onClick={() => handleClickHeart(event)}
              />
            )}
          </div>
        </div>
      </div>

      {fullState && (
        <EventShow
          event={event}
          favoriteState={favoriteState}
          onClickHeart={handleClickHeart}
          setFavoriteState={setFavoriteState}
          open={openModal}
          onClose={closeModal}
        />
      )}

      {modal && (
        <LoginModals
          onClickButton={handleClickButton}
          onCloseLog={handleClickClose}
          open={handleClickHeart}
        />
      )}
    </div>
  );
}

export default EventSlideShowCard;
